<p>These languages have a steep learning curve for most front-end web developers; however, many more approachable languages incorporate features of functional programming, most notably Python, both in its core library, with functions like <code>map</code> and <code>reduce</code> (which we’ll talk about in a bit), and with libraries such as <a title="fn.py" href="https://github.com/kachayev/fn.py">Fn.py</a><sup class="print_only" id="note-6"><a href="#6">6</a></sup>, along with JavaScript, again using collection methods, but also with libraries such as <a title="Backbone.js" href="http://underscorejs.org/">Underscore.js</a><sup class="print_only" id="note-7"><a href="#7">7</a></sup> and <a title="Bacon.js" href="http://baconjs.github.io/">Bacon.js</a><sup class="print_only" id="note-8"><a href="#8">8</a></sup>.</p>
<figure> <img src="/assets/img/sculpture-368684_1280.jpg" alt="Bildtitel" />
    <figcaption>Skulptur Statue Figur Kunst Personen Frauen Frau. Lizenz: Public Domain CC0 von <i class="copyright" data-quote="&copy;">Antranias</i></figcaption>
</figure>
<p>Functional programming can be daunting, but remember that it isn’t only for PhDs, data scientists and architecture astronauts. For most of us, the real benefit of adopting a functional style is that our programs can be broken down into smaller, simpler pieces that are both more reliable and easier to understand. If you’re a front-end developer working with data, especially if you’re formatting that data for visualization using D3, Raphael or the like, then functional programming will be an essential weapon in your arsenal.</p>
<figure> <img src="/assets/img/sculpture-368684_1280.jpg" alt="Bildtitel" /> </figure>
<p>Finding a consistent definition of functional programming is tough, and most of the literature relies on somewhat foreboding statements like “functions as first-class objects,” and “eliminating side effects.” Just in case that doesn’t bend your brain into knots, at a more theoretical level, functional programming is often explained in terms of <a title="Lambda Calculus" href="http://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a><sup class="print_only" id="note-9"><a href="#9">9</a></sup> (some <a href="http://mathoverflow.net/questions/11916/is-functional-programming-a-branch-of-mathematics">actually argue</a><sup class="print_only" id="note-10"><a href="#10">10</a></sup> that functional programming is basically math) — but you can relax. From a more pragmatic perspective, a beginner needs to understand only two concepts in order to use it for everyday applications (no calculus required!).</p>
